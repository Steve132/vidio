# Audio Support for Vidio
Required: Named pipe output for stream 0 video and separate named pipe for stream 1 audio.  This is so that you're not reading interleaved video and audio, which is *very complicated*.

Tell ffmpeg in subprocess call to output video to a named pipe and audio to another named pipe. Will need to open and listen to these named pipes.
https://trac.ffmpeg.org/ticket/1663:
mkfifo /tmp/aaa /tmp/vvv
ffmpeg -y -i 1.flv -map 0:a -f u16le -acodec pcm_s16le -ac 2 -ar 44100 /tmp/aaa -map 0:v -f yuv4mpegpipe -vcodec rawvideo /tmp/vvv

Then make 2 distinct consumer aka reader processes which consume the named pipes to confirm the separate streams are working i.e.:
ffmpeg -y -i /tmp/aaa 1_audio.avi &
ffmpeg -y -i /tmp/vvv 1_video.avi
Once confirmed, for vidio, we'll be consuming one frame at a time.

## Done: Named Pipe class with Linux Support
named_pipe.hpp
named_pipe.cpp
test_named_pipe.cpp

## Named Pipe class with Windows Support
Create a pipe with CreateNamedPipe with PIPE_ACCESS_DUPLEX and e.g. a GUID name and create a symbolic link to this pipe in the target directory with DeviceIoControl / FSCTL_SET_REPARSE_POINT. This should be quite close to mkfifo.

# Output to single video with audio from separate named pipes for audio and video:
https://ffmpeg.org/faq.html#Concatenating-using-raw-audio-and-video:
mkfifo temp1.a
mkfifo temp1.v
ffmpeg -i input1.flv -vn -f u16le -c:a pcm_s16le -ac 2 -ar 44100 - > temp1.a < /dev/null &
ffmpeg -i input1.flv -an -f yuv4mpegpipe - > temp1.v < /dev/null &
ffmpeg -f u16le -c:a pcm_s16le -ac 2 -ar 44100 -i temp1.a \
       -f yuv4mpegpipe -i temp1.v \
       -y output.flv

# Next Steps:
- [ ] Audio parsing from audio-only stream i.e. ffmpeg of an mp3
	- [ ] Parse available audio formats: parse_ffmpeg_audiofmts() // call ffmpeg -sample_fmts and/or ffmpeg -formats
	- [ ] Parse audio format: parse_input_audio_fmt()
Get the audio as an .aac by itself from the video:
ffmpeg -i test.mp4 -vn -acodec copy test.aac
Convert the audio from .aac to .mp3:
ffmpeg -i test.aac -vn -ac 2 test_audio.mp3
Input #0, aac, from 'test.aac':
  Duration: 00:00:15.17, bitrate: 342 kb/s
    Stream #0:0: Audio: aac (LC), 48000 Hz, 5.1, fltp, 342 kb/s
Stream mapping:
  Stream #0:0 -> #0:0 (aac (native) -> mp3 (libmp3lame))
Press [q] to stop, [?] for help
Output #0, mp3, to 'test_audio.mp3':
  Metadata:
    TSSE            : Lavf58.29.100
    Stream #0:0: Audio: mp3 (libmp3lame), 48000 Hz, stereo, fltp
    Metadata:
      encoder         : Lavc58.54.100 libmp3lame
size=     212kB time=00:00:13.51 bitrate= 128.4kbits/s speed=51.3x    

Reader Example in python: https://github.com/Zulko/moviepy/blob/master/moviepy/audio/io/readers.py
nbytes = Sample Width.  Number of bytes to encode the sound: 1 for 8bit sound, 2 for 16bit, 4 for 32bit sound.
Parse audio from line:     Stream #0:0: Audio: aac (LC), 48000 Hz, 5.1, fltp, 342 kb/s
audio fps = 48000 Hz
audio bitrate = 342 kb/s
duration = 00:00:15.17 from line: Duration: 00:00:15.17, bitrate: 342 kb/s
audio codec:  examples: 'pcm_s16le' for 16-bit wav and 'pcm_s32le' for 32-bit wav.
        if audio_codec is None:
            if ext in ["ogv", "webm"]:
                audio_codec = "libvorbis"
            else:
                audio_codec = "libmp3lame"
        elif audio_codec == "raw16":
            audio_codec = "pcm_s16le"
        elif audio_codec == "raw32":
            audio_codec = "pcm_s32le"

Writer Example in python: https://github.com/Zulko/moviepy/blob/master/moviepy/audio/io/ffmpeg_audiowriter.py
	- [ ] read_audio_frame()
	- [ ] Update test_playback.cpp to call read_audio_frame() from mp3

- [ ] Read ffmpeg video with audio stream and split into 2 named pipes, reading both pipes.
mkfifo /tmp/aaa /tmp/vvv
ffmpeg -y -i 1.flv -map 0:a -f u16le -acodec pcm_s16le -ac 2 -ar 44100 /tmp/aaa -map 0:v -f yuv4mpegpipe -vcodec rawvideo /tmp/vvv
	- [ ] Call Vidio read_audio_frame on named_pipe Reader on audio pipe: /tmp/aaa
	- [ ] Call Vidio read_video_frame on named_pipe Reader on video pipe: /tmp/vvv

- [ ] Audio writing:
	- [ ] write_audio_frame()
	- [ ] Update test_copy.cpp to write audio stream.

- [ ] Write ffmpeg video with audio stream into 2 separate files in Vidio:
	ffmpeg -y -i /tmp/aaa 1_audio.avi &
	ffmpeg -y -i /tmp/vvv 1_video.avi
	- [ ] Call Vidio write_audio_frame() on named_pipe Writer on audio pipe: /tmp/aaa
	- [ ] Call Vidio write_video_frame() on named_pipe Writer on video pipe: /tmp/vvv
	- [ ] Update test_copy.cpp to include this example

- [ ] Windows support
	- [ ] Named pipe opening under windows
	- [ ] parse_ffmpeg_audiofmts()
	- [ ] parse_input_audio_fmt()

- [ ] Write ffmpeg video with audio stream into single video file in Vidio:
https://ffmpeg.org/faq.html#Concatenating-using-raw-audio-and-video
mkfifo temp1.a
mkfifo temp1.v
ffmpeg -i input1.flv -vn -f u16le -c:a pcm_s16le -ac 2 -ar 44100 - > temp1.a < /dev/null &
ffmpeg -i input1.flv -an -f yuv4mpegpipe - > temp1.v < /dev/null &
ffmpeg -f u16le -c:a pcm_s16le -ac 2 -ar 44100 -i temp1.a \
       -f yuv4mpegpipe -i temp1.v \
       -y output.flv
	- [ ] Vidio writer detects audio stream in input video.
	- [ ] Vidio writer creates named pipe writer for audio pipe temp1.a after calling with subprocess: ffmpeg -i input1.flv -vn -f u16le -c:a pcm_s16le -ac 2 -ar 44100 - > temp1.a
	- [ ] Vidio writer creates named pipe writer for video pipe temp1.a after calling with subprocess: ffmpeg -i input1.flv -an -f yuv4mpegpipe - > temp1.v
	- [ ] Vidio writer calls subprocess of ffmpeg to read from named pipe for audio temp1.a and named pipe for video temp1.v and write to output video:
ffmpeg -f u16le -c:a pcm_s16le -ac 2 -ar 44100 -i temp1.a \
       -f yuv4mpegpipe -i temp1.v \
       -y output.flv
	- [ ] write_video_audio_frame() 
	- [ ] Update test_copy.cpp to include this example



Need to parse standard ffmpeg -layouts for layout configurations:
Individual channels:
NAME           DESCRIPTION
FL             front left
FR             front right
FC             front center
LFE            low frequency
BL             back left
BR             back right
FLC            front left-of-center
FRC            front right-of-center
BC             back center
SL             side left
SR             side right
TC             top center
TFL            top front left
TFC            top front center
TFR            top front right
TBL            top back left
TBC            top back center
TBR            top back right
DL             downmix left
DR             downmix right
WL             wide left
WR             wide right
SDL            surround direct left
SDR            surround direct right
LFE2           low frequency 2

NAME           DECOMPOSITION
mono           FC
stereo         FL+FR
2.1            FL+FR+LFE
3.0            FL+FR+FC
3.0(back)      FL+FR+BC
4.0            FL+FR+FC+BC
quad           FL+FR+BL+BR
quad(side)     FL+FR+SL+SR
3.1            FL+FR+FC+LFE
5.0            FL+FR+FC+BL+BR
5.0(side)      FL+FR+FC+SL+SR
4.1            FL+FR+FC+LFE+BC
5.1            FL+FR+FC+LFE+BL+BR
5.1(side)      FL+FR+FC+LFE+SL+SR
6.0            FL+FR+FC+BC+SL+SR
6.0(front)     FL+FR+FLC+FRC+SL+SR
hexagonal      FL+FR+FC+BL+BR+BC
6.1            FL+FR+FC+LFE+BC+SL+SR
6.1(back)      FL+FR+FC+LFE+BL+BR+BC
6.1(front)     FL+FR+LFE+FLC+FRC+SL+SR
7.0            FL+FR+FC+BL+BR+SL+SR
7.0(front)     FL+FR+FC+FLC+FRC+SL+SR
7.1            FL+FR+FC+LFE+BL+BR+SL+SR
7.1(wide)      FL+FR+FC+LFE+BL+BR+FLC+FRC
7.1(wide-side) FL+FR+FC+LFE+FLC+FRC+SL+SR
octagonal      FL+FR+FC+BL+BR+BC+SL+SR
hexadecagonal  FL+FR+FC+BL+BR+BC+SL+SR+TFL+TFC+TFR+TBL+TBC+TBR+WL+WR
downmix        DL+DR


Need to STORE standard ffmpeg -sample_fmts in code:
name   depth
u8        8 
s16      16 
s32      32 
flt      32 
dbl      64 
u8p       8 
s16p     16 
s32p     32 
fltp     32 
dblp     64 
s64      64 
s64p     64 



<<<<<<< HEAD
=======
/*Advanced Audio options:
-atag fourcc/tag    force audio tag/fourcc
-sample_fmt format  set sample format
-channel_layout layout  set channel layout
-guess_layout_max   set the maximum number of channels to try to guess the channel layout
-absf audio bitstream_filters  deprecated
-apre preset        set the audio options to the indicated preset



*/

https://gcc.gnu.org/onlinedocs/gcc-4.6.2/libstdc++/api/a00069.html
>>>>>>> master
